const express = require("express");
const router = express.Router();
const db = require("../../db");
const multer = require("multer");
const upload = multer();
const path = require("path");
const fs = require("fs");

router.get("/import", (req, res) => {
  db.query("SELECT * FROM tbimport", (err, results) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô import ‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ ‚ùå", details: err });
    }
    res.status(200).json({ message: "‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ", data: results });
  });
});

router.get("/import/:id", (req, res) => {
  const { id } = req.params;
  db.query("SELECT * FROM tbimport WHERE im_id = ?", [id], (err, results) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô import ‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ ‚ùå", details: err });
    }
    if (results.length === 0) {
      return res.status(404).json({ message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö import ‡∫ô‡∫µ‡ªâ" });
    }
    res.status(200).json({ message: "‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ", data: results[0] });
  });
});


router.post("/import", upload.single("document"), (req, res) => {
  const {
    im_id,
    im_date,
    qty,
    expired,
    lot,
    sup_id,
    med_id,
    emp_id_create,
    created_at,
  } = req.body;

  const fileBuffer = req.file?.buffer || null;

  const query = `
    INSERT INTO tbimport (
      im_id, im_date, qty, expired, lot, file,
      sup_id, med_id, emp_id_create, created_at
    )
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `;

  db.query(
    query,
    [
      im_id,
      im_date,
      qty,
      expired,
      lot,
      fileBuffer,  
      sup_id,
      med_id,
      emp_id_create,
      created_at,
    ],
    (err, result) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫¢‡∫≤‡ªÑ‡∫î‡ªâ ‚ùå", details: err });
      }
      res
        .status(201)
        .json({ message: "‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫¢‡∫≤‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ", med_id: result.insertId });
    }
  );
});



router.put("/import/:id", upload.single("document"), (req, res) => {
  const { id } = req.params;
  const {
    im_date,
    qty,
    expired,
    lot,
    sup_id,
    med_id,
    emp_id_updated,
    update_by,
  } = req.body;

  const fileBuffer = req.file?.buffer || null; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°

  let query;
  let params;

  if (fileBuffer) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    query = `
      UPDATE tbimport SET
        im_date = ?, qty = ?, expired = ?, lot = ?, file = ?,
        sup_id = ?, med_id = ?, emp_id_updated = ?, update_by = ?
      WHERE im_id = ?
    `;
    params = [
      im_date,
      qty,
      expired,
      lot,
      fileBuffer,
      sup_id,
      med_id,
      emp_id_updated,
      update_by,
      id,
    ];
  } else {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå
    query = `
      UPDATE tbimport SET
        im_date = ?, qty = ?, expired = ?, lot = ?,
        sup_id = ?, med_id = ?, emp_id_updated = ?, update_by = ?
      WHERE im_id = ?
    `;
    params = [
      im_date,
      qty,
      expired,
      lot,
      sup_id,
      med_id,
      emp_id_updated,
      update_by,
      id,
    ];
  }

  db.query(query, params, (err, result) => {
    if (err) {
      return res.status(500).json({ error: "‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç import ‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ ‚ùå", details: err });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö import ‡∫ó‡∫µ‡ªà‡∫à‡∫∞‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç" });
    }
    res.status(200).json({ message: "‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç import ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ" });
  });
});


// üëâ DELETE: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
router.delete("/import/:id", (req, res) => {
  const { id } = req.params;
  db.query("DELETE FROM tbimport WHERE im_id = ?", [id], (err, result) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "‡∫•‡∫∂‡∫ö import ‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ ‚ùå", details: err });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö import ‡∫ó‡∫µ‡ªà‡∫à‡∫∞‡∫•‡∫∂‡∫ö" });
    }
    res.status(200).json({ message: "‡∫•‡∫∂‡∫ö import ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ" });
  });
});

router.get("/download/:id", (req, res) => {
  const id = req.params.id;

  const query = "SELECT file FROM tbimport WHERE im_id = ?";

  db.query(query, [id], (err, results) => {
    if (err) {
      return res.status(500).json({ error: "‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÄ‡∫≠‡∫ª‡∫≤‡ªÑ‡∫ü‡∫•‡ªå‡∫≠‡∫≠‡∫Å‡ªÑ‡∫î‡ªâ", details: err });
    }
    if (results.length === 0 || !results[0].file) {
      return res.status(404).json({ message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡ªÑ‡∫ü‡∫•‡ªå" });
    }

    const fileBuffer = results[0].file;

    res.set({
      "Content-Type": "application/pdf",
      "Content-Disposition": `attachment; filename="file_${id}.pdf"`,
      "Content-Length": fileBuffer.length,
    });

    res.send(fileBuffer);
  });
});

module.exports = router;
