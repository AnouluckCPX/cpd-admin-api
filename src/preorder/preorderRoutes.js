const express = require("express");
const router = express.Router();
const db = require("../../db");

// üëâ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• preorder
router.post("/preorder", (req, res) => {
  const { preorder_id, preorder_date, qty, status, lot, sup_id, med_id } = req.body;

  const query = `
    INSERT INTO tbpreorder (preorder_id, preorder_date, qty, status, lot, sup_id, med_id)
    VALUES (?, ?, ?, ?, ?, ?, ?)
  `;

  db.query(query, [preorder_id, preorder_date, qty, status, lot, sup_id, med_id], (err, result) => {
    if (err) {
      console.error("Insert error:", err);
      return res.status(500).json({ error: "‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÄ‡∫û‡∫µ‡ªà‡∫° preorder ‚ùå", details: err });
    }
    res.status(200).json({ message: "‡ªÄ‡∫û‡∫µ‡ªà‡∫° preorder ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ" });
  });
});

// üëâ GET: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/preorder", (req, res) => {
  db.query("SELECT * FROM tbpreorder", (err, results) => {
    if (err) {
      return res.status(500).json({ error: "‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô preorder ‚ùå", details: err });
    }
    res.status(200).json({ message: "‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ", data: results });
  });
});

// üëâ GET: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° id
router.get("/preorder/:id", (req, res) => {
  const { id } = req.params;

  db.query("SELECT * FROM tbpreorder WHERE preorder_id = ?", [id], (err, results) => {
    if (err) {
      return res.status(500).json({ error: "‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô preorder ‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ ‚ùå", details: err });
    }
    if (results.length === 0) {
      return res.status(404).json({ message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö preorder ‡∫ô‡∫µ‡ªâ" });
    }
    res.status(200).json({ message: "‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ", data: results[0] });
  });
});

// üëâ PUT: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• preorder
router.put("/preorder/:id", (req, res) => {
  const { id } = req.params;
  const { preorder_date, qty, status, lot, sup_id, med_id } = req.body;

  const query = `
    UPDATE tbpreorder
    SET preorder_date = ?, qty = ?, status = ?, lot = ?, sup_id = ?, med_id = ?
    WHERE preorder_id = ?
  `;

  db.query(query, [preorder_date, qty, status, lot, sup_id, med_id, id], (err, result) => {
    if (err) {
      return res.status(500).json({ error: "‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç preorder ‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ ‚ùå", details: err });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö preorder ‡∫ó‡∫µ‡ªà‡∫à‡∫∞‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç" });
    }
    res.status(200).json({ message: "‡ªÅ‡∫Å‡ªâ‡ªÑ‡∫Ç preorder ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ" });
  });
});

// üëâ DELETE: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• preorder
router.delete("/preorder/:id", (req, res) => {
  const { id } = req.params;

  db.query("DELETE FROM tbpreorder WHERE preorder_id = ?", [id], (err, result) => {
    if (err) {
      return res.status(500).json({ error: "‡∫•‡∫∂‡∫ö preorder ‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ ‚ùå", details: err });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö preorder ‡∫ó‡∫µ‡ªà‡∫à‡∫∞‡∫•‡∫∂‡∫ö" });
    }
    res.status(200).json({ message: "‡∫•‡∫∂‡∫ö preorder ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î ‚úÖ" });
  });
});

module.exports = router;
